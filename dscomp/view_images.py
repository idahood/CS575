#!/usr/bin/env python

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from scipy import ndimage
from skimage import data
from skimage import filters

def reduce_noise(x):
    return np.where(x < 0.4, 0.0, x)

def enhance(data):
    val = filters.threshold_otsu(data)
    result = data < (val + 0.1)
    return result

def display_train_digit(idx, data, label, x_dim, y_dim):
    '''
    Train data is labeled, and 24 x 24
    '''
    print('Index: ' + str(idx))
    image = data[idx].reshape([x_dim, y_dim])
    plt.title('Example: %d  Label: %d' % (idx, label[idx]))
    plt.imshow(image, cmap=plt.get_cmap('gray_r'))
    plt.show()

def display_test_digit(idx, data, x_dim, y_dim):
    '''
    Test data is unlabeled, and 24 x 120
    There is some "noise" appears to be cleared by flooring elements < 0.4
    '''
    print('Index: ' + str(idx))
    image = data[idx].reshape([x_dim, y_dim])
    #image = reduce_noise(image)    #REDUCE NOISE DUE TO "ERASED" LAYER
    image = enhance(image)    #REDUCE NOISE DUE TO "ERASED" LAYER
    plt.title('Example: %d' % (idx))
    plt.imshow(image, cmap=plt.get_cmap('gray_r'))
    plt.xticks(range(0,120,24))
    plt.axvline(x = 24, color='r')
    plt.axvline(x = 48, color='r')
    plt.axvline(x = 72, color='r')
    plt.axvline(x = 96, color='r')
    plt.show()

def test_splitter(line, NUM_SPLITS):
    '''
    Takes line from test data, splits into 5 consituent characters
    Returns a list of ndarrays
    '''

    line = line.reshape([24, 120])

    result = []
    STEP = 24
    for i in range (0, NUM_SPLITS):
        result.append(line[0:24, i*STEP:(i+1)*STEP])
    return result

def expression_to_character(data):
    '''
    Takes ndarray, and return resized ndarray
    '''

    result = []
    for line in data:
        expression = line.reshape([24, 120])
        STEP = 24
        for i in range (0, 5):
            character = expression[0:24, i*STEP:(i+1)*STEP].reshape(1,576)
            result.append(character)
    return np.array(result)

def main():
    #train_data = pd.read_csv('train.csv', index_col=0,
    #                         header=0).as_matrix().astype(dtype=np.float32)
    #train_labels = pd.read_csv('train_labels.csv', index_col=0,
    #                          header=0).as_matrix()

    test_data = pd.read_csv('test.csv', index_col=0,
                            header=0).as_matrix().astype(dtype=np.float32)

    malformed_indices = [42, 57, 89, 94, 96, 102, 108, 138, 160, 273, 295, 331, 334, 374, 424, 464, 503, 511, 513, 514, 534, 541, 633, 658, 670, 728, 739, 740, 746, 776, 777, 785, 811, 852, 854, 863, 866, 871, 880, 881, 895, 900, 930, 932, 955, 984, 990, 1024, 1088, 1103, 1122, 1132, 1134, 1135, 1157, 1242, 1244, 1313, 1314, 1335, 1337, 1386, 1396, 1476, 1484, 1515, 1548, 1561, 1562, 1584, 1603, 1613, 1628, 1635, 1647, 1648, 1687, 1696, 1718, 1725, 1749, 1763, 1765, 1772, 1791, 1804, 1837, 1850, 1864, 1907, 1947, 1962, 1964, 2012, 2022, 2057, 2072, 2084, 2101, 2123, 2201, 2211, 2267, 2271, 2283, 2288, 2364, 2420, 2436, 2447, 2470, 2487, 2525, 2529, 2530, 2541, 2547, 2556, 2675, 2732, 2734, 2795, 2893, 2916, 2918, 2922, 2932, 2956, 2979, 2997, 3014, 3049, 3106, 3107, 3110, 3112, 3115, 3159, 3193, 3196, 3219, 3244, 3251, 3252, 3308, 3331, 3333, 3412, 3415, 3419, 3451, 3469, 3533, 3570, 3571, 3686, 3694, 3708, 3729, 3751, 3757, 3788, 3791, 3798, 3888, 3904, 3925, 3928, 3942, 3960, 3977, 4009, 4021, 4030, 4035, 4038, 4067, 4099, 4100, 4112, 4132, 4141, 4156, 4238, 4347, 4369, 4373, 4383, 4389, 4421, 4425, 4434, 4474, 4492, 4506, 4529, 4575, 4578, 4610, 4618, 4693, 4695, 4751, 4760, 4792, 4803, 4823, 4873, 4876, 4933, 4934, 4973, 4976, 4992, 5005, 5006, 5051, 5092, 5138, 5154, 5199, 5274, 5463, 5492, 5523, 5536, 5543, 5576, 5587, 5604, 5691, 5710, 5714, 5895, 5897, 5923, 5927, 5990, 6007, 6018, 6038, 6045, 6047, 6101, 6118, 6134, 6181, 6185, 6248, 6277, 6281, 6286, 6303, 6326, 6330, 6382, 6414, 6426, 6548, 6569, 6703, 6747, 6804, 6812, 6855, 6877, 6878, 6895, 6918, 6939, 7024, 7052, 7062, 7125, 7146, 7174, 7184, 7212, 7232, 7320, 7323, 7354, 7358, 7399, 7428, 7429, 7439, 7443, 7463, 7502, 7509, 7512, 7522, 7542, 7614, 7679, 7714, 7751, 7781, 7826, 7850, 7854, 7856, 7881, 7892, 7894, 7913, 7961, 7973, 7987, 8020, 8060, 8209, 8217, 8222, 8248, 8305, 8320, 8331, 8365, 8398, 8424, 8463, 8479, 8493, 8498, 8505, 8515, 8527, 8576, 8599, 8603, 8637, 8658, 8708, 8726, 8747, 8773, 8807, 8815, 8863, 8884, 8893, 8923, 8944, 8973, 8986, 9004, 9005, 9015, 9025, 9039, 9072, 9098, 9107, 9136, 9140, 9149, 9150, 9155, 9160, 9170, 9179, 9199, 9205, 9220, 9273, 9283, 9312, 9318, 9320, 9345, 9371, 9420, 9453, 9459, 9479, 9511, 9512, 9519, 9520, 9530, 9542, 9545, 9548, 9608, 9641, 9697, 9732, 9747, 9750, 9751, 9752, 9768, 9787, 9795, 9828, 9868, 9942, 9951, 9966, 9980, 9982, 10093, 10117, 10120, 10160, 10197, 10219, 10240, 10246, 10304, 10307, 10310, 10316, 10346, 10355, 10362, 10454, 10455, 10482, 10484, 10495, 10557, 10572, 10573, 10576, 10583, 10595, 10602, 10653, 10672, 10676, 10679, 10692, 10704, 10705, 10754, 10756, 10761, 10767, 10793, 10811, 10821, 10839, 10877, 10878, 10892, 10932, 10963, 10968, 10988, 10991, 11088, 11123, 11134, 11148, 11160, 11216, 11272, 11312, 11326, 11345, 11354, 11365, 11366, 11409, 11442, 11482, 11490, 11534, 11535, 11540, 11544, 11547, 11576, 11620, 11674, 11710, 11712, 11718, 11723, 11759, 11765, 11799, 11806, 11815, 11883, 11898, 11906, 11912, 11926, 11942, 11949, 12001, 12048, 12059, 12065, 12091, 12094, 12099, 12236, 12248, 12260, 12272, 12284, 12302, 12312, 12321, 12328, 12392, 12402, 12416, 12436, 12459, 12467, 12471, 12479, 12481, 12495, 12497, 12509, 12518, 12536, 12545, 12642, 12670, 12703, 12724, 12753, 12792, 12823, 12877, 12879, 12893, 12978, 12991, 12999, 13023, 13055, 13064, 13158, 13160, 13165, 13185, 13189, 13191, 13220, 13254, 13259, 13260, 13285, 13363, 13383, 13391, 13459, 13510, 13523, 13535, 13556, 13583, 13605, 13610, 13630, 13646, 13651, 13662, 13678, 13685, 13696, 13842, 13875, 13944, 13951, 13972, 13989, 13999, 14035, 14057, 14087, 14111, 14143, 14153, 14215, 14232, 14248, 14287, 14298, 14304, 14332, 14381, 14397, 14437, 14494, 14525, 14555, 14594, 14600, 14625, 14639, 14677, 14687, 14705, 14706, 14710, 14830, 14887, 14908, 14932, 14938, 15003, 15086, 15152, 15176, 15216, 15223, 15232, 15243, 15393, 15396, 15478, 15517, 15532, 15592, 15595, 15604, 15607, 15648, 15659, 15679, 15682, 15716, 15783, 15790, 15793, 15796, 15800, 15892, 15896, 15909, 15928, 15947, 15952, 15955, 15996, 16011, 16012, 16025, 16116, 16122, 16311, 16315, 16366, 16374, 16380, 16387, 16396, 16416, 16426, 16434, 16452, 16490, 16511, 16532, 16583, 16614, 16656, 16662, 16663, 16681, 16697, 16716, 16743, 16779, 16796, 16807, 16821, 16907, 16939, 16999, 17067, 17091, 17110, 17113, 17120, 17133, 17142, 17175, 17242, 17260, 17270, 17295, 17335, 17379, 17381, 17437, 17448, 17476, 17531, 17536, 17577, 17580, 17597, 17610, 17631, 17644, 17674, 17682, 17728, 17735, 17752, 17769, 17809, 17815, 17870, 17892, 17916, 17922, 17923, 17934, 17942, 17943, 17956, 17959, 17972, 18042, 18056, 18064, 18085, 18096, 18152, 18169, 18170, 18174, 18175, 18221, 18365, 18372, 18408, 18442, 18483, 18501, 18521, 18526, 18537, 18569, 18573, 18617, 18641, 18645, 18658, 18660, 18705, 18737, 18812, 18819, 18861, 18886, 18906, 18930, 18969, 19025, 19028, 19069, 19094, 19145, 19177, 19221, 19225, 19444, 19513, 19528, 19571, 19592, 19610, 19614, 19639, 19645, 19649, 19760, 19777, 19842, 19852, 19853, 19860, 19867, 19878, 19890, 19893, 19927, 19929, 19936, 19951, 19952, 19958, 19980, 19990]


    '''
    split_images = test_splitter(test_data[3], 5)
    for image in split_images:
        image = image.reshape([24, 24])
        #image = reduce_noise(image)    #REDUCE NOISE DUE TO "ERASED" LAYER
        #image = enhance(image)    #REDUCE NOISE DUE TO "ERASED" LAYER
        plt.imshow(image, cmap=plt.get_cmap('gray_r'))
        plt.show()
    '''

    for idx in malformed_indices:
        display_test_digit(idx, test_data, 24, 120)

if __name__ == '__main__':
    main()
